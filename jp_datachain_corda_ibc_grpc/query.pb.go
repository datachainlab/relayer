// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jp/datachain/corda/ibc/grpc/query.proto

package jp_datachain_corda_ibc_grpc

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryHostRequest struct {
}

func (m *QueryHostRequest) Reset()         { *m = QueryHostRequest{} }
func (m *QueryHostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostRequest) ProtoMessage()    {}
func (*QueryHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{0}
}
func (m *QueryHostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostRequest.Merge(m, src)
}
func (m *QueryHostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostRequest proto.InternalMessageInfo

type QueryBankRequest struct {
}

func (m *QueryBankRequest) Reset()         { *m = QueryBankRequest{} }
func (m *QueryBankRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBankRequest) ProtoMessage()    {}
func (*QueryBankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{1}
}
func (m *QueryBankRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBankRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBankRequest.Merge(m, src)
}
func (m *QueryBankRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBankRequest proto.InternalMessageInfo

type Host struct {
	Participants []*Party                      `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId       *StateRef                     `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Notary       *Party                        `protobuf:"bytes,3,opt,name=notary,proto3" json:"notary,omitempty"`
	ClientIds    []string                      `protobuf:"bytes,4,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
	ConnIds      []string                      `protobuf:"bytes,5,rep,name=conn_ids,json=connIds,proto3" json:"conn_ids,omitempty"`
	PortChanIds  []*Host_PortChannelIdentifier `protobuf:"bytes,6,rep,name=port_chan_ids,json=portChanIds,proto3" json:"port_chan_ids,omitempty"`
	Id           string                        `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{2}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Host) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *Host) GetNotary() *Party {
	if m != nil {
		return m.Notary
	}
	return nil
}

func (m *Host) GetClientIds() []string {
	if m != nil {
		return m.ClientIds
	}
	return nil
}

func (m *Host) GetConnIds() []string {
	if m != nil {
		return m.ConnIds
	}
	return nil
}

func (m *Host) GetPortChanIds() []*Host_PortChannelIdentifier {
	if m != nil {
		return m.PortChanIds
	}
	return nil
}

func (m *Host) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Host_PortChannelIdentifier struct {
	PortId    string `protobuf:"bytes,1,opt,name=portId,proto3" json:"portId,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *Host_PortChannelIdentifier) Reset()         { *m = Host_PortChannelIdentifier{} }
func (m *Host_PortChannelIdentifier) String() string { return proto.CompactTextString(m) }
func (*Host_PortChannelIdentifier) ProtoMessage()    {}
func (*Host_PortChannelIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{2, 0}
}
func (m *Host_PortChannelIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host_PortChannelIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host_PortChannelIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host_PortChannelIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host_PortChannelIdentifier.Merge(m, src)
}
func (m *Host_PortChannelIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *Host_PortChannelIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Host_PortChannelIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_Host_PortChannelIdentifier proto.InternalMessageInfo

func (m *Host_PortChannelIdentifier) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *Host_PortChannelIdentifier) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type Bank struct {
	Participants []*Party         `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	BaseId       *StateRef        `protobuf:"bytes,2,opt,name=baseId,proto3" json:"baseId,omitempty"`
	Allocated    *Bank_BalanceMap `protobuf:"bytes,3,opt,name=allocated,proto3" json:"allocated,omitempty"`
	Locked       *Bank_BalanceMap `protobuf:"bytes,4,opt,name=locked,proto3" json:"locked,omitempty"`
	Minted       *Bank_BalanceMap `protobuf:"bytes,5,opt,name=minted,proto3" json:"minted,omitempty"`
	Id           string           `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Bank) Reset()         { *m = Bank{} }
func (m *Bank) String() string { return proto.CompactTextString(m) }
func (*Bank) ProtoMessage()    {}
func (*Bank) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{3}
}
func (m *Bank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank.Merge(m, src)
}
func (m *Bank) XXX_Size() int {
	return m.Size()
}
func (m *Bank) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank.DiscardUnknown(m)
}

var xxx_messageInfo_Bank proto.InternalMessageInfo

func (m *Bank) GetParticipants() []*Party {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Bank) GetBaseId() *StateRef {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *Bank) GetAllocated() *Bank_BalanceMap {
	if m != nil {
		return m.Allocated
	}
	return nil
}

func (m *Bank) GetLocked() *Bank_BalanceMap {
	if m != nil {
		return m.Locked
	}
	return nil
}

func (m *Bank) GetMinted() *Bank_BalanceMap {
	if m != nil {
		return m.Minted
	}
	return nil
}

func (m *Bank) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Bank_BalanceMapPerDenom struct {
	PubkeyToAmount map[string]string `protobuf:"bytes,1,rep,name=pubkeyToAmount,proto3" json:"pubkeyToAmount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_BalanceMapPerDenom) Reset()         { *m = Bank_BalanceMapPerDenom{} }
func (m *Bank_BalanceMapPerDenom) String() string { return proto.CompactTextString(m) }
func (*Bank_BalanceMapPerDenom) ProtoMessage()    {}
func (*Bank_BalanceMapPerDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{3, 0}
}
func (m *Bank_BalanceMapPerDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_BalanceMapPerDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_BalanceMapPerDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_BalanceMapPerDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_BalanceMapPerDenom.Merge(m, src)
}
func (m *Bank_BalanceMapPerDenom) XXX_Size() int {
	return m.Size()
}
func (m *Bank_BalanceMapPerDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_BalanceMapPerDenom.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_BalanceMapPerDenom proto.InternalMessageInfo

func (m *Bank_BalanceMapPerDenom) GetPubkeyToAmount() map[string]string {
	if m != nil {
		return m.PubkeyToAmount
	}
	return nil
}

type Bank_BalanceMap struct {
	DenomToMap map[string]*Bank_BalanceMapPerDenom `protobuf:"bytes,1,rep,name=denomToMap,proto3" json:"denomToMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bank_BalanceMap) Reset()         { *m = Bank_BalanceMap{} }
func (m *Bank_BalanceMap) String() string { return proto.CompactTextString(m) }
func (*Bank_BalanceMap) ProtoMessage()    {}
func (*Bank_BalanceMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86420f34155dd61, []int{3, 1}
}
func (m *Bank_BalanceMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bank_BalanceMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bank_BalanceMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bank_BalanceMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bank_BalanceMap.Merge(m, src)
}
func (m *Bank_BalanceMap) XXX_Size() int {
	return m.Size()
}
func (m *Bank_BalanceMap) XXX_DiscardUnknown() {
	xxx_messageInfo_Bank_BalanceMap.DiscardUnknown(m)
}

var xxx_messageInfo_Bank_BalanceMap proto.InternalMessageInfo

func (m *Bank_BalanceMap) GetDenomToMap() map[string]*Bank_BalanceMapPerDenom {
	if m != nil {
		return m.DenomToMap
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryHostRequest)(nil), "jp.datachain.corda.ibc.grpc.QueryHostRequest")
	proto.RegisterType((*QueryBankRequest)(nil), "jp.datachain.corda.ibc.grpc.QueryBankRequest")
	proto.RegisterType((*Host)(nil), "jp.datachain.corda.ibc.grpc.Host")
	proto.RegisterType((*Host_PortChannelIdentifier)(nil), "jp.datachain.corda.ibc.grpc.Host.PortChannelIdentifier")
	proto.RegisterType((*Bank)(nil), "jp.datachain.corda.ibc.grpc.Bank")
	proto.RegisterType((*Bank_BalanceMapPerDenom)(nil), "jp.datachain.corda.ibc.grpc.Bank.BalanceMapPerDenom")
	proto.RegisterMapType((map[string]string)(nil), "jp.datachain.corda.ibc.grpc.Bank.BalanceMapPerDenom.PubkeyToAmountEntry")
	proto.RegisterType((*Bank_BalanceMap)(nil), "jp.datachain.corda.ibc.grpc.Bank.BalanceMap")
	proto.RegisterMapType((map[string]*Bank_BalanceMapPerDenom)(nil), "jp.datachain.corda.ibc.grpc.Bank.BalanceMap.DenomToMapEntry")
}

func init() {
	proto.RegisterFile("jp/datachain/corda/ibc/grpc/query.proto", fileDescriptor_d86420f34155dd61)
}

var fileDescriptor_d86420f34155dd61 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xc7, 0xd9, 0xb6, 0x2c, 0xbf, 0x9e, 0xf2, 0x43, 0x32, 0xfe, 0xc9, 0x5a, 0xb5, 0xa9, 0x24,
	0xc6, 0x5e, 0xc8, 0x36, 0xa9, 0x26, 0x1a, 0xa2, 0x26, 0x20, 0x1a, 0x4a, 0x42, 0x52, 0x17, 0xee,
	0xd4, 0x90, 0xe9, 0xcc, 0x20, 0x43, 0x97, 0x99, 0x61, 0x76, 0x4a, 0xb2, 0x6f, 0xe1, 0x3b, 0xf8,
	0x22, 0x5e, 0x6a, 0xe2, 0x05, 0x97, 0xde, 0x69, 0xe0, 0x45, 0xcc, 0xec, 0x6e, 0x97, 0x42, 0xc8,
	0x02, 0x8d, 0x77, 0x9d, 0x73, 0xce, 0xf7, 0x33, 0xdf, 0x99, 0x33, 0x3d, 0x0b, 0x8f, 0xf7, 0x54,
	0x9b, 0x62, 0x83, 0xc9, 0x2e, 0xe6, 0xa2, 0x4d, 0xa4, 0xa6, 0xb8, 0xcd, 0xfb, 0xa4, 0xfd, 0x59,
	0x2b, 0xd2, 0x3e, 0x18, 0x32, 0x1d, 0xfb, 0x4a, 0x4b, 0x23, 0xd1, 0xbd, 0x3d, 0xe5, 0xe7, 0x85,
	0x7e, 0x52, 0xe8, 0xf3, 0x3e, 0xf1, 0x6d, 0x61, 0x7d, 0xb1, 0x88, 0x92, 0x2c, 0x17, 0x4d, 0xac,
	0x58, 0x94, 0xb2, 0x16, 0x10, 0xcc, 0xbf, 0xb7, 0xe8, 0x35, 0x19, 0x99, 0x80, 0x1d, 0x0c, 0x59,
	0x64, 0xf2, 0xd8, 0x0a, 0x16, 0x83, 0x51, 0xec, 0x5b, 0x19, 0x2a, 0xb6, 0x06, 0xbd, 0x83, 0x59,
	0x85, 0xb5, 0xe1, 0x84, 0x2b, 0x2c, 0x4c, 0xe4, 0x39, 0xcd, 0x72, 0xab, 0xd6, 0x59, 0xf0, 0x0b,
	0x3c, 0xf9, 0x3d, 0xac, 0x4d, 0x1c, 0x9c, 0xd1, 0xa1, 0xd7, 0x30, 0xd3, 0xc7, 0x11, 0xdb, 0xe6,
	0xd4, 0x2b, 0x35, 0x9d, 0x56, 0xad, 0xf3, 0xa8, 0x10, 0xb1, 0x69, 0xb0, 0x61, 0x01, 0xdb, 0x09,
	0x5c, 0xab, 0xea, 0x52, 0xb4, 0x04, 0xae, 0x90, 0x06, 0xeb, 0xd8, 0x2b, 0x27, 0xf2, 0xab, 0x38,
	0xc8, 0x14, 0xe8, 0x01, 0x00, 0x09, 0x39, 0x13, 0x66, 0x9b, 0xd3, 0xc8, 0xab, 0x34, 0xcb, 0xad,
	0x6a, 0x50, 0x4d, 0x23, 0x5d, 0x1a, 0xa1, 0xbb, 0xf0, 0x1f, 0x91, 0x42, 0x24, 0xc9, 0xe9, 0x24,
	0x39, 0x63, 0xd7, 0x36, 0xf5, 0x01, 0xfe, 0x57, 0x52, 0x9b, 0x6d, 0xb2, 0x8b, 0xd3, 0xbc, 0x9b,
	0x1c, 0xff, 0x79, 0xe1, 0xe6, 0xf6, 0xde, 0xfc, 0x9e, 0xd4, 0xe6, 0xcd, 0x2e, 0x16, 0x82, 0x85,
	0x5d, 0xca, 0x84, 0xe1, 0x3b, 0x9c, 0xe9, 0xa0, 0xa6, 0xb2, 0xb0, 0x85, 0xcf, 0x41, 0x89, 0x53,
	0x6f, 0xa6, 0xe9, 0xb4, 0xaa, 0x41, 0x89, 0xd3, 0xfa, 0x06, 0xdc, 0xbe, 0x50, 0x85, 0xee, 0x80,
	0x6b, 0x75, 0x5d, 0xea, 0x39, 0x49, 0x71, 0xb6, 0x42, 0xf7, 0xa1, 0x4a, 0x46, 0xc5, 0xc9, 0xad,
	0xda, 0x63, 0x8d, 0x02, 0x0b, 0x5f, 0x5d, 0xa8, 0xd8, 0x96, 0xfe, 0xb3, 0x16, 0xbe, 0x82, 0xac,
	0x19, 0x93, 0x75, 0x70, 0x1d, 0xaa, 0x38, 0x0c, 0x25, 0xc1, 0x86, 0xd1, 0xac, 0x89, 0x4f, 0x0a,
	0x09, 0xd6, 0xbc, 0xbf, 0x82, 0x43, 0x2c, 0x08, 0xdb, 0xc0, 0x2a, 0x38, 0x95, 0xa3, 0x55, 0x70,
	0x43, 0x49, 0x06, 0x8c, 0x7a, 0x95, 0x09, 0x40, 0x99, 0xd6, 0x52, 0xf6, 0xb9, 0xb0, 0x76, 0xa6,
	0x27, 0xa1, 0xa4, 0xda, 0xac, 0x8d, 0x6e, 0xde, 0xc6, 0x1f, 0x0e, 0xa0, 0xd3, 0xb2, 0x1e, 0xd3,
	0xab, 0x4c, 0xc8, 0x7d, 0xa4, 0x60, 0x4e, 0x0d, 0xfb, 0x03, 0x16, 0x6f, 0xc9, 0xe5, 0x7d, 0x39,
	0x14, 0x26, 0xeb, 0xc3, 0xda, 0x75, 0x36, 0x1d, 0xd1, 0xfc, 0xde, 0x19, 0xd4, 0x5b, 0x61, 0x74,
	0x1c, 0x9c, 0xe3, 0xd7, 0x97, 0xe1, 0xe6, 0x05, 0x65, 0x68, 0x1e, 0xca, 0x03, 0x16, 0x67, 0x4f,
	0xc9, 0xfe, 0x44, 0xb7, 0x60, 0xfa, 0x10, 0x87, 0x43, 0x96, 0xbd, 0xa1, 0x74, 0xb1, 0x54, 0x7a,
	0xe1, 0xd4, 0x7f, 0x3b, 0x00, 0xa7, 0xbb, 0xa3, 0x8f, 0x00, 0xd4, 0x6e, 0xbf, 0x25, 0x37, 0xb0,
	0xca, 0xfc, 0xbf, 0xbc, 0x8e, 0x7f, 0x7f, 0x35, 0x97, 0xa7, 0x9e, 0xc7, 0x78, 0xf5, 0x08, 0x6e,
	0x9c, 0x4b, 0x5f, 0xe0, 0x75, 0x7d, 0xdc, 0x6b, 0xad, 0xf3, 0x6c, 0x92, 0xdb, 0x1b, 0x3b, 0x61,
	0xe7, 0xa7, 0x03, 0xb3, 0xc9, 0xf4, 0xdb, 0x64, 0xfa, 0x90, 0x13, 0x86, 0x3e, 0x41, 0x35, 0x9f,
	0x90, 0x68, 0xb1, 0x10, 0x7f, 0x7e, 0x92, 0xd6, 0x1f, 0x5e, 0x3a, 0x17, 0x72, 0x7c, 0xf2, 0xcf,
	0xbc, 0x02, 0x7e, 0x6c, 0x28, 0x5f, 0x82, 0xb7, 0x95, 0x2b, 0xde, 0xf7, 0xe3, 0x86, 0x73, 0x74,
	0xdc, 0x70, 0xfe, 0x1c, 0x37, 0x9c, 0x2f, 0x27, 0x8d, 0xa9, 0xa3, 0x93, 0xc6, 0xd4, 0xaf, 0x93,
	0xc6, 0x54, 0xdf, 0x4d, 0x3e, 0x00, 0x4f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x87, 0x2a, 0x83,
	0xba, 0x77, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryHost(ctx context.Context, in *QueryHostRequest, opts ...grpc.CallOption) (*Host, error)
	QueryBank(ctx context.Context, in *QueryBankRequest, opts ...grpc.CallOption) (*Bank, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryHost(ctx context.Context, in *QueryHostRequest, opts ...grpc.CallOption) (*Host, error) {
	out := new(Host)
	err := c.cc.Invoke(ctx, "/jp.datachain.corda.ibc.grpc.QueryService/QueryHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryBank(ctx context.Context, in *QueryBankRequest, opts ...grpc.CallOption) (*Bank, error) {
	out := new(Bank)
	err := c.cc.Invoke(ctx, "/jp.datachain.corda.ibc.grpc.QueryService/QueryBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryHost(context.Context, *QueryHostRequest) (*Host, error)
	QueryBank(context.Context, *QueryBankRequest) (*Bank, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryHost(ctx context.Context, req *QueryHostRequest) (*Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHost not implemented")
}
func (*UnimplementedQueryServiceServer) QueryBank(ctx context.Context, req *QueryBankRequest) (*Bank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBank not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jp.datachain.corda.ibc.grpc.QueryService/QueryHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryHost(ctx, req.(*QueryHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jp.datachain.corda.ibc.grpc.QueryService/QueryBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryBank(ctx, req.(*QueryBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jp.datachain.corda.ibc.grpc.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryHost",
			Handler:    _QueryService_QueryHost_Handler,
		},
		{
			MethodName: "QueryBank",
			Handler:    _QueryService_QueryBank_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jp/datachain/corda/ibc/grpc/query.proto",
}

func (m *QueryHostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBankRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBankRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBankRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PortChanIds) > 0 {
		for iNdEx := len(m.PortChanIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PortChanIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ConnIds) > 0 {
		for iNdEx := len(m.ConnIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ConnIds[iNdEx])
			copy(dAtA[i:], m.ConnIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ConnIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ClientIds) > 0 {
		for iNdEx := len(m.ClientIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIds[iNdEx])
			copy(dAtA[i:], m.ClientIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ClientIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Notary != nil {
		{
			size, err := m.Notary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Host_PortChannelIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host_PortChannelIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host_PortChannelIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x32
	}
	if m.Minted != nil {
		{
			size, err := m.Minted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Locked != nil {
		{
			size, err := m.Locked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Allocated != nil {
		{
			size, err := m.Allocated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseId != nil {
		{
			size, err := m.BaseId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Participants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_BalanceMapPerDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_BalanceMapPerDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_BalanceMapPerDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubkeyToAmount) > 0 {
		for k := range m.PubkeyToAmount {
			v := m.PubkeyToAmount[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Bank_BalanceMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bank_BalanceMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bank_BalanceMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomToMap) > 0 {
		for k := range m.DenomToMap {
			v := m.DenomToMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryHostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBankRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Notary != nil {
		l = m.Notary.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ConnIds) > 0 {
		for _, s := range m.ConnIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PortChanIds) > 0 {
		for _, e := range m.PortChanIds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Host_PortChannelIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Bank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.BaseId != nil {
		l = m.BaseId.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Allocated != nil {
		l = m.Allocated.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Locked != nil {
		l = m.Locked.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Minted != nil {
		l = m.Minted.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Bank_BalanceMapPerDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PubkeyToAmount) > 0 {
		for k, v := range m.PubkeyToAmount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Bank_BalanceMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomToMap) > 0 {
		for k, v := range m.DenomToMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryHostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBankRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBankRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBankRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notary == nil {
				m.Notary = &Party{}
			}
			if err := m.Notary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnIds = append(m.ConnIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortChanIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortChanIds = append(m.PortChanIds, &Host_PortChannelIdentifier{})
			if err := m.PortChanIds[len(m.PortChanIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host_PortChannelIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortChannelIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortChannelIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Party{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseId == nil {
				m.BaseId = &StateRef{}
			}
			if err := m.BaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocated == nil {
				m.Allocated = &Bank_BalanceMap{}
			}
			if err := m.Allocated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Locked == nil {
				m.Locked = &Bank_BalanceMap{}
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minted == nil {
				m.Minted = &Bank_BalanceMap{}
			}
			if err := m.Minted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_BalanceMapPerDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMapPerDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMapPerDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyToAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeyToAmount == nil {
				m.PubkeyToAmount = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PubkeyToAmount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bank_BalanceMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomToMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomToMap == nil {
				m.DenomToMap = make(map[string]*Bank_BalanceMapPerDenom)
			}
			var mapkey string
			var mapvalue *Bank_BalanceMapPerDenom
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Bank_BalanceMapPerDenom{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomToMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
