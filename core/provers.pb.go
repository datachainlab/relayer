// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/core/provers.proto

package core

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryProveRequest struct {
}

func (m *QueryProveRequest) Reset()         { *m = QueryProveRequest{} }
func (m *QueryProveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProveRequest) ProtoMessage()    {}
func (*QueryProveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd03b519a1b4f44e, []int{0}
}
func (m *QueryProveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProveRequest.Merge(m, src)
}
func (m *QueryProveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProveRequest proto.InternalMessageInfo

type QueryProveResponse struct {
	Proof []byte `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryProveResponse) Reset()         { *m = QueryProveResponse{} }
func (m *QueryProveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProveResponse) ProtoMessage()    {}
func (*QueryProveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd03b519a1b4f44e, []int{1}
}
func (m *QueryProveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProveResponse.Merge(m, src)
}
func (m *QueryProveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryProveRequest)(nil), "relayer.core.QueryProveRequest")
	proto.RegisterType((*QueryProveResponse)(nil), "relayer.core.QueryProveResponse")
}

func init() { proto.RegisterFile("relayer/core/provers.proto", fileDescriptor_dd03b519a1b4f44e) }

var fileDescriptor_dd03b519a1b4f44e = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0xed, 0xa1, 0x1d, 0xac, 0x2e, 0x98, 0x0e, 0x28, 0x42, 0xa6, 0xca, 0x84, 0x10, 0xb5,
	0x25, 0x78, 0x03, 0x46, 0xc4, 0x00, 0x1d, 0x18, 0xd8, 0x9c, 0x72, 0xb8, 0x91, 0x42, 0xce, 0x9c,
	0x1d, 0xa4, 0xbc, 0x05, 0x8f, 0xd5, 0xb1, 0x23, 0x23, 0x24, 0x2f, 0x82, 0xf2, 0x67, 0x88, 0x84,
	0xba, 0x7d, 0x77, 0xdf, 0xa7, 0xdf, 0xfd, 0x11, 0x09, 0x41, 0x61, 0x6b, 0x20, 0xb3, 0x45, 0x02,
	0xe3, 0x09, 0x3f, 0x81, 0x82, 0xf6, 0x84, 0x11, 0xe5, 0x62, 0xf4, 0x74, 0xe7, 0x25, 0x4b, 0x87,
	0x0e, 0x7b, 0xc3, 0x74, 0x6a, 0xc8, 0x24, 0xe7, 0x0e, 0xd1, 0x15, 0x60, 0xac, 0xcf, 0x8d, 0x2d,
	0x4b, 0x8c, 0x36, 0xe6, 0x58, 0x8e, 0x84, 0xf4, 0x54, 0x9c, 0x3c, 0x55, 0x40, 0xf5, 0x63, 0xc7,
	0xdd, 0xc0, 0x47, 0x05, 0x21, 0xa6, 0x57, 0x42, 0x4e, 0x9b, 0xc1, 0x63, 0x19, 0x40, 0x2e, 0xc5,
	0xcc, 0x13, 0xe2, 0xdb, 0x19, 0x5f, 0xf1, 0xcb, 0xc5, 0x66, 0x28, 0x6e, 0x9e, 0xc5, 0xbc, 0x8f,
	0x91, 0x7c, 0x10, 0xb3, 0x5e, 0xc9, 0x0b, 0x3d, 0x5d, 0x4b, 0xff, 0xe3, 0x27, 0xab, 0xe3, 0x81,
	0x61, 0x56, 0xca, 0xee, 0xee, 0xf7, 0xbf, 0x8a, 0xed, 0x1b, 0xc5, 0x0f, 0x8d, 0xe2, 0x3f, 0x8d,
	0xe2, 0x5f, 0xad, 0x62, 0x87, 0x56, 0xb1, 0xef, 0x56, 0xb1, 0x97, 0x6b, 0x97, 0xc7, 0x5d, 0x95,
	0xe9, 0x2d, 0xbe, 0x9b, 0x5d, 0xed, 0x81, 0x0a, 0x78, 0x75, 0x40, 0xeb, 0xc2, 0x66, 0xc1, 0xd4,
	0x55, 0xbe, 0x9e, 0x3e, 0x2d, 0x9b, 0xf7, 0xb7, 0xde, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x0f,
	0x70, 0x29, 0x11, 0x4b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProverClient is the client API for Prover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProverClient interface {
	Prove(ctx context.Context, in *QueryProveRequest, opts ...grpc.CallOption) (*QueryProveResponse, error)
}

type proverClient struct {
	cc grpc1.ClientConn
}

func NewProverClient(cc grpc1.ClientConn) ProverClient {
	return &proverClient{cc}
}

func (c *proverClient) Prove(ctx context.Context, in *QueryProveRequest, opts ...grpc.CallOption) (*QueryProveResponse, error) {
	out := new(QueryProveResponse)
	err := c.cc.Invoke(ctx, "/relayer.core.Prover/Prove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverServer is the server API for Prover service.
type ProverServer interface {
	Prove(context.Context, *QueryProveRequest) (*QueryProveResponse, error)
}

// UnimplementedProverServer can be embedded to have forward compatible implementations.
type UnimplementedProverServer struct {
}

func (*UnimplementedProverServer) Prove(ctx context.Context, req *QueryProveRequest) (*QueryProveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}

func RegisterProverServer(s grpc1.Server, srv ProverServer) {
	s.RegisterService(&_Prover_serviceDesc, srv)
}

func _Prover_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relayer.core.Prover/Prove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverServer).Prove(ctx, req.(*QueryProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Prover_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relayer.core.Prover",
	HandlerType: (*ProverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prove",
			Handler:    _Prover_Prove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayer/core/provers.proto",
}

func (m *QueryProveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintProvers(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProvers(dAtA []byte, offset int, v uint64) int {
	offset -= sovProvers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryProveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovProvers(uint64(l))
	}
	return n
}

func sovProvers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProvers(x uint64) (n int) {
	return sovProvers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryProveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProvers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProvers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProvers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProvers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProvers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProvers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProvers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProvers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProvers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProvers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProvers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProvers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProvers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProvers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProvers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProvers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProvers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProvers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProvers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProvers = fmt.Errorf("proto: unexpected end of group")
)
